--Deleting a Track:
BEGIN TRANSACTION;

CREATE TEMP TABLE VALUE_STORE(
EditableID INT NOT NULL,
ProductionID INT NOT NULL);

INSERT INTO VALUE_STORE(EditableID, ProductionID)
SELECT EditableID, ProductionID
FROM MEDIA_PRODUCTION 
WHERE Name='No Running Allowed' AND Type='TRACK';

DELETE FROM CHECKS_OUT WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM TRACK WHERE TrackID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM MEDIA_PRODUCTION WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM DIGITAL_COPY WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM EDITABLE WHERE EditableID IN 
(SELECT EditableID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


-- Deleting an Album:
-- All tracks of an album must be deleted before deleting album
BEGIN TRANSACTION;

CREATE TEMP TABLE VALUE_STORE(
EditableID INT NOT NULL,
ProductionID INT NOT NULL);

INSERT INTO VALUE_STORE(EditableID, ProductionID)
SELECT EditableID, ProductionID 
FROM MEDIA_PRODUCTION 
WHERE Name='The Poison Red' AND Type='ALBUM';

DELETE FROM CHECKS_OUT WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM ALBUM WHERE AlbumID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM DIGITAL_COPY WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM PHYSICAL_COPY WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM MEDIA_PRODUCTION WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM EDITABLE WHERE EditableID IN 
(SELECT EditableID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


-- Deleting an Artist:
-- All albums by an artist must be deleted before deleting artist
BEGIN TRANSACTION;

CREATE TEMP TABLE VALUE_STORE(
EditableID INT NOT NULL,
ArtistID INT NOT NULL);

INSERT INTO VALUE_STORE(EditableID, ArtistID)
SELECT EditableID, ArtistID 
FROM ARTIST 
WHERE Name='Nonpoint';

DELETE FROM ARTIST WHERE ArtistID IN 
(SELECT ArtistID FROM VALUE_STORE);
DELETE FROM EDITABLE WHERE EditableID IN 
(SELECT EditableID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


--Deleting a Movie:
BEGIN TRANSACTION;

CREATE TEMP TABLE VALUE_STORE(
EditableID INT NOT NULL,
MovieID INT NOT NULL);

INSERT INTO VALUE_STORE(EditableID, MovieID)
SELECT EditableID, ProductionID 
FROM MEDIA_PRODUCTION 
WHERE Name='Kids in a Sandbox' AND Type='MOVIE';

DELETE FROM CHECKS_OUT WHERE ProductionID IN 
(SELECT MovieID FROM VALUE_STORE);
DELETE FROM ROLE WHERE MovieID IN 
(SELECT MovieID FROM VALUE_STORE);
DELETE FROM MOVIE WHERE MovieID IN 
(SELECT MovieID FROM VALUE_STORE);
DELETE FROM DIGITAL_COPY WHERE ProductionID IN 
(SELECT MovieID FROM VALUE_STORE);
DELETE FROM PHYSICAL_COPY WHERE ProductionID IN 
(SELECT MovieID FROM VALUE_STORE);
DELETE FROM MEDIA_PRODUCTION WHERE ProductionID IN 
(SELECT MovieID FROM VALUE_STORE);
DELETE FROM EDITABLE WHERE EditableID IN 
(SELECT EditableID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


--Deleting a Customer:
-- All library cards belonging to the customer must be deleted before deleting customer
BEGIN TRANSACTION; 

CREATE TEMP TABLE VALUE_STORE(
    	CustID INT NOT NULL);

INSERT INTO VALUE_STORE(CustID) 
  	SELECT CustID 
FROM CUSTOMER 
WHERE FullName='Prim Johnton';

DELETE FROM CUSTOMER WHERE CustID IN 
(SELECT CustID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


--Deleting an Actor
--All movies by an actor must be deleted before deleting the actor
BEGIN TRANSACTION;

CREATE TEMP TABLE VALUE_STORE(
EditableID INT NOT NULL,
ActorID INT NOT NULL);

INSERT INTO VALUE_STORE(EditableID, ActorID)
SELECT EditableID, ActorID
FROM ACTOR
WHERE Name='Matthew McConaughey'

DELETE FROM ACTOR WHERE ActorID IN 
(SELECT ActorID FROM VALUE_STORE);

DELETE FROM Editable WHERE EditableID IN 
(SELECT EditableID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


--Deleting a  Digitial Copy
DELETE FROM DIGITAL_COPY WHERE ProductionID IN
(SELECT ProductionID FROM MEDIA_PRODUCTION WHERE name=’Captain Marvel’)


--Deleting a Physical Copy
DELETE FROM PHYSICAL_COPY WHERE ProductionID IN
(SELECT ProductionID FROM MEDIA_PRODUCTION WHERE Name=’For Those About To Rock We Salute You’)


--Deleting a Director
--All movies by a director must be deleted before deleting the director
BEGIN TRANSACTION;

CREATE TEMP TABLE VALUE_STORE(
EditableID INT NOT NULL,
DirectorID INT NOT NULL);

INSERT INTO VALUE_STORE(EditableID, DirectorID )
SELECT EditableID, DirectorID 
FROM DIRECTOR 
WHERE Name='Tim Burton'

DELETE FROM DIRECTOR WHERE DirectorID IN 
(SELECT DirectorID FROM VALUE_STORE);

DELETE FROM Editable WHERE EditableID IN 
(SELECT EditableID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


--Deleting an Editable
-- All references to the editable must first be deleted
DELETE FROM EDITABLE WHERE EditableID IN 
(SELECT EditableID FROM ACTOR WHERE Name='Matthew McConaughey')


--Deleting a Library Card
Library cards may should not be deleted from the database as they can be marked inactive if needed, and are tied to checkout history


--Deleting a Media Production
BEGIN TRANSACTION;

CREATE TEMP TABLE VALUE_STORE(
EditableID INT NOT NULL,
ProductionID INT NOT NULL);

INSERT INTO VALUE_STORE(EditableID, ProductionID )
SELECT EditableID, ProductionID 
FROM MEDIA_PRODUCTION 
WHERE Name='Kids in a Sandbox' AND Type='MOVIE';

DELETE FROM CHECKS_OUT WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM ROLE WHERE MovieID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM MOVIE WHERE MovieID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM DIGITAL_COPY WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM PHYSICAL_COPY WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM MEDIA_PRODUCTION WHERE ProductionID IN 
(SELECT ProductionID FROM VALUE_STORE);
DELETE FROM EDITABLE WHERE EditableID IN 
(SELECT EditableID FROM VALUE_STORE);

DROP TABLE VALUE_STORE;

COMMIT TRANSACTION;


--Deleting an Employee
DELETE FROM EMPLOYEE WHERE EmpID = 1


--Deleting a Role
DELETE FROM Role WHERE EmpID = Man14
